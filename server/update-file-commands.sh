#!/bin/bash

# First occurrence (MemStorage)
sed -i '741,778c\  private async updateUserProgressAfterAnswer(answer: UserAnswer): Promise<void> {\n    const question = await this.getQuestion(answer.questionId);\n    if (!question) return;\n    \n    const topicId = question.topicId;\n    const progress = await this.getUserProgressByTopic(answer.userId, topicId);\n    \n    // Check if this is a new answer or repeating the same question\n    const previousAnswers = await db\n      .select()\n      .from(userAnswers)\n      .where(and(\n        eq(userAnswers.userId, answer.userId),\n        eq(userAnswers.questionId, answer.questionId)\n      ));\n    \n    // If there is more than 1 answer (including the current one),\n    // then it is a repeated question\n    const isNewQuestion = previousAnswers.length <= 1;\n    \n    if (progress) {\n      await this.createOrUpdateUserProgress({\n        userId: answer.userId,\n        topicId,\n        // Only increment the count if this is a new question\n        questionsAttempted: isNewQuestion ? progress.questionsAttempted + 1 : progress.questionsAttempted,\n        questionsCorrect: isNewQuestion && answer.isCorrect \n          ? progress.questionsCorrect + 1 \n          : progress.questionsCorrect,\n        totalTimeSpent: progress.totalTimeSpent + answer.timeSpent,\n      });\n    } else {\n      await this.createOrUpdateUserProgress({\n        userId: answer.userId,\n        topicId,\n        questionsAttempted: 1,\n        questionsCorrect: answer.isCorrect ? 1 : 0,\n        totalTimeSpent: answer.timeSpent,\n      });\n    }' server/storage.ts

# Second occurrence (DatabaseStorage)
sed -i '1633,1669c\  private async updateUserProgressAfterAnswer(answer: UserAnswer): Promise<void> {\n    const question = await this.getQuestion(answer.questionId);\n    if (!question) return;\n    \n    const topicId = question.topicId;\n    const progress = await this.getUserProgressByTopic(answer.userId, topicId);\n    \n    // Check if this is a new answer or repeating the same question\n    const previousAnswers = await db\n      .select()\n      .from(userAnswers)\n      .where(and(\n        eq(userAnswers.userId, answer.userId),\n        eq(userAnswers.questionId, answer.questionId)\n      ));\n    \n    // If there is more than 1 answer (including the current one),\n    // then it is a repeated question\n    const isNewQuestion = previousAnswers.length <= 1;\n    \n    if (progress) {\n      await this.createOrUpdateUserProgress({\n        userId: answer.userId,\n        topicId,\n        // Only increment the count if this is a new question\n        questionsAttempted: isNewQuestion ? progress.questionsAttempted + 1 : progress.questionsAttempted,\n        questionsCorrect: isNewQuestion && answer.isCorrect \n          ? progress.questionsCorrect + 1 \n          : progress.questionsCorrect,\n        totalTimeSpent: progress.totalTimeSpent + answer.timeSpent,\n      });\n    } else {\n      await this.createOrUpdateUserProgress({\n        userId: answer.userId,\n        topicId,\n        questionsAttempted: 1,\n        questionsCorrect: answer.isCorrect ? 1 : 0,\n        totalTimeSpent: answer.timeSpent,\n      });\n    }\n    \n    // Record activity\n    await this.createUserActivity({\n      userId: answer.userId,\n      activityType: "question_answered",\n      topicId,\n      details: { \n        questionId: answer.questionId,\n        isCorrect: answer.isCorrect,\n        timeSpent: answer.timeSpent\n      }\n    });' server/storage.ts